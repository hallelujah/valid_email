grammar EmailAddress
  # Email RFC 822 spec starts here
  rule addr_spec
    local_part "@" domain {
      def pieces
        [ local_part.text_value, domain.text_value ]
      end
    }
  end

  rule local_part
    dot_atom / quoted_string
  end

  rule domain
    dot_atom / domain_literal
  end

  rule domain_literal
    CFWS? "[" (FWS? dcontent)* FWS? "]" CFWS?
  end

  rule dcontent
    dtext / quoted_pair
  end

  rule dtext
    NO_WS_CTL /           # Non white space controls
    [\x21-\x5a\x5e-\x7e]  # The rest of the US-ASCII characters
                          # not including "[", "]", or "\"
  end

  # Non-whitespace control characters
  rule NO_WS_CTL
    [\x01-\x08\x0b-\x0c\x0e-\x1f\x7f]
  end

  rule dot_atom
    CFWS? dot_atom_text CFWS?
  end

  rule dot_atom_text
    atext+ ( "." atext+ )*
  end

  # folding white space
  rule FWS
    (WSP* CRLF)? WSP+
  end

  rule CFWS
      (FWS? comment)* ((FWS? comment) / FWS)
  end

  rule CRLF
    "\r\n"
  end

  rule WSP
    [ \t]
  end
  # Any character except controls, SP, and specials.
  rule atext
    ALPHA / DIGIT / [!#$\%&'*+\/=?^_`{|}~-]
  end

  rule ALPHA
    [A-Za-z]
  end

  rule DIGIT
    [0-9]
  end

  rule text
    [\x01-\x09\x0b-\x0c\x0e-\x7f]
  end

  rule specials
    [()<>\[\]:;@\\,.] / DQUOTE
  end

  rule DQUOTE
    '"'
  end

  rule ccontent
    ctext / quoted_pair / comment
  end

  rule quoted_pair
    "\\" text
  end

  rule qtext
    NO_WS_CTL /              # Non white space controls
    [0x21\x23-\x5b\x5d-\x7e] # The rest of the US-ASCII characters
                             # not including "\" or the quote character
  end

  rule qcontent
    qtext / quoted_pair
  end

  rule quoted_string
    CFWS? DQUOTE (FWS? qcontent)* FWS? DQUOTE CFWS?
  end

  rule comment
    "(" ( FWS? ccontent )* FWS? ")"
  end

  rule ctext
    NO_WS_CTL /                   # Non white space controls
    [\x21-\x27\x2a-\x5b\x5d-\x7e] # The rest of the US-ASCII characters
                                  # not including "(", ")", or "\"
  end

end

